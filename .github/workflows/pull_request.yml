name: PR

on:
  pull_request:
    branches:
      - "main"
      - "branch-v*"
      - "bug-fix-*"
      - "feature-*"

concurrency:
  group: '${{ github.head_ref }}'
  cancel-in-progress: true

jobs:
  python-dependencies:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "PYTHON_VERSION=$(cat .python-version)" >> $GITHUB_ENV
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pipenv'
      - name: Install Pipenv
        run: pip install pipenv==2022.11.30
      - name: Install virtual environment
        run: pipenv install --dev
  node-dependencies:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "18.14.0"
      - name: Get yarn cache
        id: get-yarn-cache
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
      - name: Cache yarn modules
        id: cache-yarn
        uses: actions/cache@v3
        with:
          path: ${{ steps.get-yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
      - name: Install yarn deps
        if: steps.cache-yarn.outputs.cache-hit != 'true'
        run: yarn
  test-functional:
    needs: [python-dependencies, node-dependencies]
    strategy:
      matrix:
        suite: [ timeout_modal_expired, timeout_modal_extended, timeout_modal_extended_new_window, features, general, components ]
    runs-on: ubuntu-22.04
    env:
      EQ_RUN_FUNCTIONAL_TESTS_HEADLESS: True
      # :TODO: Revisit & update when 2 instances can be used without adverse effects
      EQ_FUNCTIONAL_TEST_MAX_INSTANCES: 1
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "18.14.0"
      - run: |
          echo "PYTHON_VERSION=$(cat .python-version)" >> $GITHUB_ENV
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pipenv'
      - name: Install pipenv
        run: pip install pipenv==2022.11.30
      - name: Install virtual environment
        run: pipenv install --dev
      - name: Get yarn cache
        id: get-yarn-cache
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
      - name: Cache yarn modules
        uses: actions/cache@v3
        id: cache-yarn
        with:
          path: ${{ steps.get-yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
      - name: Install yarn deps
        run: yarn install
      - name: Docker compose
        run: docker-compose --version && RUNNER_ENV_FILE=.functional-tests.env docker-compose up --build -d
      - name: Functional tests
        run: ./scripts/run_tests_functional.sh ${{ matrix.suite }}
      - name: Docker compose shutdown
        run: RUNNER_ENV_FILE=.functional-tests.env docker-compose kill
  docker-push:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Set Tag and SHA
        run: |
          CLEAN_TAG=$(echo "${{ github.event.pull_request.head.ref  }}"  | tr / -)
          echo "TAG=$CLEAN_TAG" >> $GITHUB_ENV
          echo "SHA=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
      - name: Write app version
        run: |
          echo "Writing SHA $SHA to .application_version"
          printf $SHA > .application-version
      - name: Build
        run: >
          docker build -t onsdigital/eq-questionnaire-runner:$TAG
          -t ${{ secrets.GAR_LOCATION }}/${{ secrets.GAR_PROJECT_ID }}/docker-images/eq-questionnaire-runner:$TAG .
      - name: Push to Docker Hub
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          echo "Pushing to DockerHub with tag $TAG"
          docker push onsdigital/eq-questionnaire-runner:$TAG

      - name: Push to GAR
        env:
          GAR_SERVICE_KEY: ${{ secrets.GAR_SERVICE_KEY }}
        run: |
          echo $GAR_SERVICE_KEY | docker login -u _json_key --password-stdin https://${{ secrets.GAR_LOCATION }}
          gcloud auth configure-docker ${{ secrets.GAR_LOCATION }}
          echo "Pushing to GAR with tag $TAG"
          docker push ${{ secrets.GAR_LOCATION }}/${{ secrets.GAR_PROJECT_ID }}/docker-images/eq-questionnaire-runner:$TAG
