name: PR

on:
  pull_request:
    branches:
      - "main"
      - "branch-v*"
      - "bug-fix-*"
      - "feature-*"

concurrency:
  group: '${{ github.head_ref }}'
  cancel-in-progress: true

jobs:
  python-dependencies:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "PYTHON_VERSION=$(cat .python-version)" >> $GITHUB_ENV
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pipenv'
      - name: Install Pipenv
        run: pip install pipenv==2023.8.22
      - name: Install virtual environment
        run: |
          sudo apt-get install libsnappy-dev
          pipenv install --dev
#  node-dependencies:
#    runs-on: ubuntu-22.04
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-node@v3
#        with:
#          node-version-file : ".nvmrc"
#      - name: Get yarn cache
#        id: get-yarn-cache
#        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
#      - name: Cache yarn modules
#        id: cache-yarn
#        uses: actions/cache@v3
#        with:
#          path: ${{ steps.get-yarn-cache.outputs.dir }}
#          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
#      - name: Install yarn deps
#        if: steps.cache-yarn.outputs.cache-hit != 'true'
#        run: yarn
#  lint:
#    needs: [python-dependencies, node-dependencies]
#    runs-on: ubuntu-22.04
#    steps:
#      - uses: actions/checkout@v3
#      - run: |
#          echo "PYTHON_VERSION=$(cat .python-version)" >> $GITHUB_ENV
#      - uses: actions/setup-python@v4
#        with:
#          python-version: ${{ env.PYTHON_VERSION }}
#          cache: 'pipenv'
#      - uses: actions/setup-node@v3
#        with:
#          node-version-file: ".nvmrc"
#      - name: Write app version
#        run: printf "${{ github.event.pull_request.head.sha }}" > .application-version
#      - name: Install pipenv
#        run: pip install pipenv==2023.8.22
#      - name: Install virtual environment
#        run: pipenv install --dev
#      - name: Compile translations
#        run: make translate
#      - name: Running translation tests
#        run: pipenv run python -m scripts.extract_translation_templates --test
#      - name: Python linting
#        run: make lint-python
#      - name: Get yarn cache
#        id: get-yarn-cache
#        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
#      - name: Cache yarn modules
#        uses: actions/cache@v3
#        id: cache-yarn
#        with:
#          path: ${{ steps.get-yarn-cache.outputs.dir }}
#          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
#      - name: Install yarn deps
#        run: yarn install
#      - name: Functional tests spec lint
#        run: ./scripts/lint_functional_test_specs.sh
#      - name: Javascript linting
#        run: make lint-js
#  test-unit:
#    needs: python-dependencies
#    runs-on: ubuntu-22.04
#    steps:
#      - uses: actions/checkout@v3
#      - run: |
#          echo "PYTHON_VERSION=$(cat .python-version)" >> $GITHUB_ENV
#      - uses: actions/setup-python@v4
#        with:
#          python-version: ${{ env.PYTHON_VERSION }}
#          cache: 'pipenv'
#      - name: Install apt dependencies
#        run: |
#            sudo apt-get install libsnappy-dev libgconf-2-4 jq
#
#            # Install wkthtmltopdf with patched Qt
#            sudo apt-get install -y xfonts-base xfonts-75dpi
#            wget https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6-1/wkhtmltox_0.12.6-1.bionic_amd64.deb
#            sudo dpkg -i wkhtmltox_0.12.6-1.bionic_amd64.deb
#      - name: Write app version
#        run: printf "${{ github.event.pull_request.head.sha }}" > .application-version
#      - name: Install pipenv
#        run: pip install pipenv==2023.8.22
#      - name: Install virtual environment
#        run: pipenv install --dev
#      - name: Load templates
#        run: make load-design-system-templates
#      - name: Compile translations
#        run: make translate
#      - name: Link env vars
#        run: ln -sf .development.env .env
#      - name: Running unit tests
#        run: make test-unit
#  validate-schemas:
#    runs-on: ubuntu-22.04
#    steps:
#      - uses: actions/checkout@v3
#      - name: Run validator
#        run: ./scripts/run_validator.sh
#      - name: Running schema tests
#        run: make validate-test-schemas
  test-mutmut:
    needs: [python-dependencies]
    strategy:
      matrix:
        module: [ questionnaire ]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "PYTHON_VERSION=$(cat .python-version)" >> $GITHUB_ENV
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pipenv'
      - name: Install pipenv
        run: pip install pipenv==2023.8.22
      - name: Install virtual environment
        run: pipenv install --dev
      - name: Docker compose for int testing
        run: docker-compose --version && RUNNER_ENV_FILE=.functional-tests.env docker-compose up --build -d
      - name: Run mutmut
        run: |
            pipenv run mutmut run \
                --paths-to-mutate "app/${{ matrix.module }}/" \
                --runner "py.test -n auto tests/app/{{ matrix.module }}/"
#            make test-functional-suite SUITE=${{ matrix.module }}
      - name: Docker compose shutdown
        run: RUNNER_ENV_FILE=.functional-tests.env docker-compose kill
