name: Test

on:
  push

jobs:
  python-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: '3.7'
      - name: Install apt Dependencies
        run: sudo apt-get install libsnappy-dev libgconf-2-4
      - run: |
          echo "::set-env name=PYTHON_VERSION::$(python -V 2>&1)"
      - name: Install Pipenv
        run: pip install pipenv==2018.11.26
      - name: Cache virtualenv
        id: cache-virtualenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs/
          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-virtualenvs-${{ hashFiles('Pipfile.lock') }}
      - name: Install Virtual Environment
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
        run: pipenv install --dev
  node-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '8.16.0'
      - name: Get yarn cache
        id: get-yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache yarn modules
        id: cache-yarn
        uses: actions/cache@v1
        with:
          path: ${{ steps.get-yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
      - name: Install yarn deps
        if: steps.cache-yarn.outputs.cache-hit != 'true'
        run: yarn
  test-unit:
    needs: python-dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: '3.7'
      - name: Install apt Dependencies
        run: sudo apt-get install libsnappy-dev libgconf-2-4
      - name: Write App Version
        run: printf $(git rev-parse HEAD) > .application-version
      - run: |
          echo "::set-env name=PYTHON_VERSION::$(python -V 2>&1)"
      - name: Install Pipenv
        run: pip install pipenv==2018.11.26
      - name: Cache virtualenv
        id: cache-virtualenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs/
          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-virtualenvs-${{ hashFiles('Pipfile.lock') }}
      - name: Install Virtual Environment
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
        run: pipenv install --dev
      - name: Load Templates
        run: ./scripts/load_templates.sh
      - name: Compile Translations
        run: make translate
      - name: Run Travis Steps
        run: ln -sf .development.env .env
      - name: Running translation tests
        run: pipenv run python -m scripts.extract_translation_templates --test
      - name: Running lint tests
        run: pipenv run ./scripts/run_lint.sh
      - name: Running unit tests
        run: pipenv run ./scripts/run_tests_unit.sh
  validate-schemas:
      runs-on: ubuntu-latest
      services:
        validator:
          image: onsdigital/eq-schema-validator:v3
          ports:
            - 5001:5000
      steps:
        - uses: actions/checkout@v2
        - name: Running schema tests
          run: ./scripts/validate_test_schemas.sh
  test-functional:
      needs: [python-dependencies, node-dependencies]
      runs-on: ubuntu-latest
      env:
        EQ_RUN_FUNCTIONAL_TESTS_HEADLESS: True
      steps:
        - uses: actions/checkout@v2
        - uses: actions/setup-node@v1
          with:
            node-version: '8.16.0'
        - uses: actions/setup-python@v1
          with:
            python-version: '3.7'
        - run: |
            echo "::set-env name=PYTHON_VERSION::$(python -V 2>&1)"
        - name: Install Pipenv
          run: pip install pipenv==2018.11.26
        - name: Cache virtualenv
          id: cache-virtualenv
          uses: actions/cache@v1
          with:
            path: ~/.local/share/virtualenvs/
            key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-virtualenvs-${{ hashFiles('Pipfile.lock') }}
        - name: Get yarn cache
          id: get-yarn-cache
          run: echo "::set-output name=dir::$(yarn cache dir)"
        - name: Cache yarn modules
          uses: actions/cache@v1
          id: cache-yarn
          with:
            path: ${{ steps.get-yarn-cache.outputs.dir }}
            key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
        - name: Install yarn deps
          run: yarn install
        - name: Functional tests spec lint
          run: ./scripts/lint_functional_test_specs.sh
        - name: Javascript Linting Check
          run: yarn lint
        - name: Docker compose
          run: docker-compose --version && docker-compose up --build -d
        - name: Functional Tests
          run: ./scripts/run_tests_functional.sh
        - name: Docker Compose Shutdown
          run: docker-compose kill
  docker-push:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
        - name: Tag
          run: |
            export BRANCH=$(git rev-parse --abbrev-ref HEAD)
            export TAG=`if [ "$BRANCH" == "" ]; then echo "latest"; else echo branch-$BRANCH; fi`
            echo "::set-env name=TAG::$TAG"
        - name: Build
          run: docker build -t onsdigital/eq-questionnaire-runner:$TAG .
        - name: Push
          run: |
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{secrets.DOCKER_PASSWORD}}
            echo "Pushing with tag [$TAG]"
            docker push onsdigital/eq-questionnaire-runner:$TAG

